// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserSettings UserSettings[]
  Ratings      Ratings[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// Mulingu schema
model UserSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  theme     String
  native    String?
  languages String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ratings {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  language String
  rating   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, language])
}

/**
 * A Category groups NounGroups, VerbGroups and SentenceGroups.
 */
model Category {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  nounGroups     NounGroup[]
  verbGroups     VerbGroup[]
  sentenceGroups SentenceGroup[]
}

/**
 * A NounGroup groups nouns with the same meaning in different languages.
 */
model NounGroup {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  nouns      Noun[]
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
}

/**
 * A Noun is a word that refers to a person, place, thing, event, substance or quality.
 */
model Noun {
  id                        String @id @default(auto()) @map("_id") @db.ObjectId
  language                  String
  definiteSingularArticle   String
  indefiniteSingularArticle String
  definitePluralArticle     String
  singular                  String
  plural                    String

  nounGroup   NounGroup @relation(fields: [nounGroupId], references: [id])
  nounGroupId String    @db.ObjectId

  @@unique([language, definiteSingularArticle, definitePluralArticle, indefiniteSingularArticle, singular, plural])
}

/**
 * A SentenceGroup groups sentences with the same meaning in different languages.
 */
model SentenceGroup {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  sentences  Sentence[]
  Category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String?    @db.ObjectId
}

/**
 * A Sentence is a group of words that expresses a statement, question, command or exclamation.
 */
model Sentence {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  language        String
  sentence        String
  sentenceGroup   SentenceGroup @relation(fields: [sentenceGroupId], references: [id])
  sentenceGroupId String        @db.ObjectId

  @@unique([language, sentence])
}

/**
 * A VerbGroup groups verbs with the same meaning in different languages.
 */
model VerbGroup {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  verbs      Verb[]
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
}

/**
 * A Verb is a word that describes an action, state or occurrence.
 */
model Verb {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  language    String
  infinitive  String
  forms       VerbForm[]
  verbGroup   VerbGroup  @relation(fields: [verbGroupId], references: [id])
  verbGroupId String     @db.ObjectId
}

/**
 * A VerbForm is a conjugated form of a verb.
 */
model VerbForm {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  numerus String
  persona String
  modus   String
  tempus  String
  value   String
  verb    Verb   @relation(fields: [verbId], references: [id])
  verbId  String @db.ObjectId
}
